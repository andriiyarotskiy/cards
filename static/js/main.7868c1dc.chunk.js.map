{"version":3,"sources":["n1_main/m1-ui/component/Header/Header.tsx","n1_main/m3-dal/api.ts","n1_main/m2-bll/login-reducer.ts","n1_main/m2-bll/profile-reducer.ts","n1_main/m1-ui/component/Profile/Profile.tsx","n1_main/m1-ui/common/CustomSnackbar/CustomSnackbar.tsx","n1_main/m1-ui/component/Login/Login.tsx","n1_main/m2-bll/registration-reducer.ts","n1_main/m1-ui/component/Registration/Registration.tsx","n1_main/m2-bll/forgotPassword-reducer.ts","n1_main/m1-ui/component/ForgotPassword/ForgotPassword.tsx","n1_main/m1-ui/pages/AuthPage.tsx","n1_main/m2-bll/changePassword-reducer.ts","n1_main/m1-ui/component/PasswordChange/PasswordChange.tsx","n1_main/m1-ui/App.tsx","n1_main/m2-bll/store.ts","index.tsx","n1_main/m1-ui/component/Registration/Registration.module.scss","n1_main/m1-ui/component/Login/Login.module.scss","n1_main/m1-ui/component/Profile/Profile.module.css","n1_main/m1-ui/component/ForgotPassword/ForgotPassword.module.scss"],"names":["Header","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","loginAC","value","type","setStatusProgressAC","progress","InitialStateLogin","isAuth","error","loginReducer","state","action","InitialState","userData","email","name","isInitialized","setProfileDataAC","isInitializedAC","profileReducer","Profile","useSelector","profile","login","dispatch","useDispatch","useEffect","a","res","console","log","response","style","position","top","textAlign","width","LinearProgress","className","mainBlock","title","Button","onClick","info","variant","color","to","CustomSnackbar","dispatchCallback","open","severity","sneckbarStyle","Snackbar","autoHideDuration","onClose","event","reason","Alert","Login","classes","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","length","onSubmit","then","catch","e","isErrorEmail","touched","isErrorPass","isOpen","circularProgress","CircularProgress","Avatar","avatar","Typography","component","loginPage","handleSubmit","form","customInput","TextField","margin","required","fullWidth","id","label","onKeyPress","setTouched","autoComplete","autoFocus","helperText","getFieldProps","iconError","FormControlLabel","control","Checkbox","disabled","buttonDisabled","submit","Grid","container","item","xs","snackbarItem","isLoggedIn","loaderStatus","setErrorRegistration","requestStatus","registrationReducer","repeatPassword","Registration","registration","onKeyPressHandler","isErrorRepeatPass","snackBarContainer","forgotPasswordReducer","ForgotPassword","from","message","resetForm","forgotPass","AuthPage","useStyles","root","CssBaseline","sm","md","image","Paper","elevation","square","paper","exact","path","render","makeStyles","theme","height","backgroundImage","backgroundRepeat","backgroundColor","palette","grey","backgroundSize","backgroundPosition","spacing","display","flexDirection","alignItems","secondary","main","marginTop","setPassword","isCorrectPass","isCorrectPassword","isCorrect","changePasswordReducer","isSet","PasswordChange","changePassword","token","useParams","resetPasswordToken","Container","maxWidth","App","rootReducer","combineReducers","forgotPassword","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7868c1dc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header;","import axios from 'axios';\r\n\r\n// http://localhost:7542/2.0/  => local back\r\n\r\n// https://neko-back.herokuapp.com/2.0/  => remote back\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    ...settings,\r\n})\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseLoginType>(\"auth/login\", data);\r\n    },\r\n    registration(data: RegistrationDataType) {\r\n        return instance.post(\"auth/register\", data);\r\n    },\r\n    forgotPassword(data: ForgotPasswordType) {\r\n        return instance.post<ResponseForgotType>(\"auth/forgot\", data);\r\n    },\r\n    changePassword(data: ChangePasswordType) {\r\n        return instance.post(\"auth/set-new-password\", data)\r\n    },\r\n    authMe() {\r\n        return instance.post<ResponseLoginType>(\"auth/me\", {});\r\n    },\r\n    logOut() {\r\n        return instance.delete(\"auth/me\", {});\r\n    },\r\n}\r\n//types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type ForgotPasswordType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\nexport type ChangePasswordType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type ResponseLoginType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error: string\r\n}\r\n\r\nexport type ResponseForgotType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\nexport type RegistrationDataType = {\r\n    email: string\r\n    password: string\r\n    repeatPassword?: string // not necessarily\r\n}","import {ActionTypes} from \"./store\";\r\nimport {authAPI, LoginParamsType} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setProfileDataAC} from \"./profile-reducer\";\r\n\r\nconst loginReducer = (state: InitialStateLoginType = InitialStateLogin, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\": {\r\n            return {...state, isAuth: action.value}\r\n        }\r\n        case \"login/SET-STATUS-PROGRESS\": {\r\n            return {...state, progress: action.progress}\r\n        }\r\n        case \"login/SET-ERROR-MESSAGE\": {\r\n            return {...state, error: action.error}\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n//AC\r\nexport const loginAC = (value: boolean) => (\r\n    {type: \"login/SET-IS-LOGGED-IN\", value} as const\r\n)\r\nexport const setStatusProgressAC = (progress: RequestStatusType) => (\r\n    {type: \"login/SET-STATUS-PROGRESS\", progress} as const\r\n)\r\nexport const setErrorMessageAC = (error: RequestStatusType) => (\r\n    {type: \"login/SET-ERROR-MESSAGE\", error} as const\r\n)\r\n\r\n\r\n//TC\r\nexport const LoginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionTypes>) => {\r\n    dispatch(setStatusProgressAC(\"loading\"));\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(loginAC(true))\r\n            dispatch(setProfileDataAC(res.data))\r\n            dispatch(setStatusProgressAC(\"succeeded\"))\r\n\r\n        })\r\n        .catch(e => {\r\n            dispatch(setErrorMessageAC(e.response.data.error))\r\n            dispatch(setStatusProgressAC(\"failed\"))\r\n        })\r\n}\r\n\r\n\r\n//TYPES\r\nconst InitialStateLogin = {\r\n    isAuth: false,\r\n    progress: \"idle\" as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialStateLogin;\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\nexport default loginReducer;","import {ActionTypes} from \"./store\";\r\nimport {authAPI, ResponseLoginType} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loginAC} from \"./login-reducer\";\r\n\r\ntype InitialStateType = typeof InitialState;\r\n\r\nconst InitialState = {\r\n    userData: {\r\n        email: '',\r\n        name: '',\r\n    },\r\n    isInitialized: true\r\n}\r\n\r\nconst profileReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"SET-PROFILE-DATA\": {\r\n            return {...state, userData: action.userData}\r\n        }\r\n        case \"USER-INITIALIZED\": {\r\n            return {...state, isInitialized: action.isInitialized}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const setProfileDataAC = (userData: ResponseLoginType) => (\r\n    {type: \"SET-PROFILE-DATA\", userData} as const\r\n)\r\nexport const isInitializedAC = (isInitialized: boolean) => (\r\n    {type: \"USER-INITIALIZED\", isInitialized} as const\r\n)\r\n\r\nexport const authMeTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(isInitializedAC(true))\r\n        const res = await authAPI.authMe()\r\n        dispatch(setProfileDataAC(res.data))\r\n\r\n        dispatch(loginAC(true))\r\n    } catch (e) {\r\n        console.log(e.response.data.error) // message => user not authorized\r\n    }\r\n    dispatch(isInitializedAC(false))\r\n}\r\nexport const logOutTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(isInitializedAC(true))\r\n        const res = await authAPI.logOut()\r\n        console.log(res.data.info)\r\n        dispatch(loginAC(false))\r\n    } catch (e) {\r\n        console.log(e.response.data.error)\r\n    }\r\n    dispatch(isInitializedAC(false))\r\n}\r\n\r\n\r\nexport default profileReducer;","import React, {useEffect} from \"react\";\r\nimport style from \"./Profile.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {authMeTC, logOutTC} from \"../../../m2-bll/profile-reducer\";\r\nimport {Button, LinearProgress} from \"@material-ui/core\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype  userDataType = { email: string, name: string }\r\n\r\nexport const Profile = () => {\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.profile.isInitialized)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth)\r\n    const userData = useSelector<AppRootStateType, userDataType>(state => state.profile.userData)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(authMeTC())\r\n    }, [dispatch])\r\n\r\n    const logOutClick = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    if (isInitialized) {\r\n        return <div style={{position: 'fixed', top: '0', textAlign: 'center', width: '100%'}}>\r\n            <LinearProgress/>\r\n        </div>\r\n    }\r\n    if (!isAuth) {\r\n        return <Redirect to=\"/authPage/login\"/>\r\n    }\r\n    return (\r\n        <div className={style.mainBlock}>\r\n            <div className=\"container\">\r\n                <h1 className={style.title}>Main page</h1>\r\n                <h3>{userData.name}</h3>\r\n                <Button onClick={logOutClick} variant=\"contained\" color=\"primary\">Log Out</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {Snackbar} from \"@material-ui/core\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype CustomSnackbarType = {\r\n    error: string | null\r\n    dispatchCallback: (param: any) => void\r\n    open: boolean\r\n    severity: \"error\" | \"info\" | \"success\" | \"warning\"\r\n    sneckbarStyle: string\r\n}\r\n\r\nconst CustomSnackbar = ({error, dispatchCallback, open, severity, sneckbarStyle}: CustomSnackbarType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(dispatchCallback(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar\r\n            className={sneckbarStyle}\r\n            open={open}\r\n            autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert variant=\"filled\" severity={severity}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\nexport default CustomSnackbar;","import React, {KeyboardEvent} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Checkbox,\r\n    CircularProgress,\r\n    FormControlLabel,\r\n    Grid,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {InitialStateLoginType, LoginTC, setStatusProgressAC} from \"../../../m2-bll/login-reducer\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport style from \"./Login.module.scss\"\r\nimport CustomSnackbar from \"../../common/CustomSnackbar/CustomSnackbar\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\ntype LoginFormType = {\r\n    classes: any\r\n}\r\n\r\n\r\nconst Login = ({classes}: LoginFormType) => {\r\n    const {progress, error} = useSelector<AppRootStateType, InitialStateLoginType>(state => state.login)\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 7) {\r\n                errors.password = \"Password > 7 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(LoginTC(values))\r\n        }\r\n    })\r\n\r\n    // Input settings\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        formik.setTouched({}, false)\r\n    }\r\n    const isErrorEmail = !!(formik.touched.email && formik.errors.email)\r\n    const isErrorPass = !!(formik.touched.password && formik.errors.password)\r\n    // Input settings\r\n\r\n    // snackbar\r\n    const isOpen = progress === \"failed\"\r\n    // snackbar\r\n    // btn disable\r\n    const buttonDisabled = () => {\r\n        if (progress === \"loading\" || !formik.values.email || !formik.values.password) return true\r\n    }\r\n    return (\r\n        <>\r\n            {progress === \"loading\"\r\n                ? <div className={style.circularProgress}><CircularProgress/></div>\r\n                : <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n            }\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n            </Typography>\r\n\r\n            <div className={style.loginPage}>\r\n                <form onSubmit={formik.handleSubmit} className={classes.form}>\r\n                    <div className={style.customInput}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required fullWidth\r\n                            id=\"email\" name=\"email\" label=\"Email Address\"\r\n                            onKeyPress={onKeyPressHandler}\r\n                            error={isErrorEmail}\r\n                            autoComplete=\"email\" autoFocus\r\n                            helperText={<span style={{color: \"red\", position: \"absolute\"}}>{formik.errors.email}</span>}\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {isErrorEmail\r\n                            ? <div className={style.iconError}>\r\n                                <ErrorIcon color=\"secondary\"/>\r\n                            </div>\r\n                            : null}\r\n                    </div>\r\n                    <div className={style.customInput}>\r\n                        <div className={style.customInput}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required fullWidth\r\n                                name=\"password\" label=\"Password\" type=\"password\" id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                {...formik.getFieldProps(\"password\")}\r\n                                error={isErrorPass}\r\n                                helperText={<span\r\n                                    style={{color: \"red\", position: \"absolute\"}}>{formik.errors.password}</span>}\r\n                            />\r\n                            {isErrorPass\r\n                                ? <div className={style.iconError}>\r\n                                    <ErrorIcon color=\"secondary\"/>\r\n                                </div>\r\n                                : null}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        disabled={buttonDisabled()}\r\n                        type=\"submit\" fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <NavLink to=\"/authPage/forgotPassword\">Forgot password?</NavLink>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <NavLink to=\"/authPage/registration\">\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </NavLink>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <CustomSnackbar error={error}\r\n                                    sneckbarStyle={style.snackbarItem}\r\n                                    dispatchCallback={() => setStatusProgressAC(\"idle\")}\r\n                                    open={isOpen}\r\n                                    severity={\"error\"}/>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n\r\n\r\n/*\r\n\r\n{formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n\r\n{formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n*/\r\n\r\n","import {ActionTypes} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, RegistrationDataType} from \"../m3-dal/api\";\r\n\r\nexport type InitialStateType = typeof InitialState;\r\nexport type RequestStatusType = 'idle' | 'loading'\r\nconst InitialState = {\r\n    isLoggedIn: false,\r\n    error: null as string | null,\r\n    loaderStatus: 'idle' as RequestStatusType\r\n}\r\n\r\nconst registrationReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"SET-IS-LOGGED-IN\": {\r\n            return {...state, isLoggedIn: true}\r\n        }\r\n        case \"SET-ERROR-REGISTRATION\": {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"SET-REQUEST-STATUS\": {\r\n            return {...state, loaderStatus: action.loaderStatus}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const setIsLoggedIn = () => (\r\n    {type: \"SET-IS-LOGGED-IN\"} as const\r\n)\r\nexport const setErrorRegistration = (error: string | null) => (\r\n    {type: \"SET-ERROR-REGISTRATION\", error} as const\r\n)\r\nexport const requestStatus = (loaderStatus: RequestStatusType) => (\r\n    {type: \"SET-REQUEST-STATUS\", loaderStatus} as const\r\n)\r\n\r\n\r\n//THUNK\r\n\r\nexport const registrationTC = (data: RegistrationDataType) => async (dispatch: Dispatch) => {\r\n    dispatch(requestStatus('loading'))\r\n    try {\r\n        await authAPI.registration(data)\r\n        dispatch(setIsLoggedIn())\r\n    } catch (e) {\r\n        dispatch(setErrorRegistration(e.response.data.error))\r\n    }\r\n    finally {\r\n        dispatch(requestStatus('idle'))\r\n    }\r\n}\r\n\r\nexport default registrationReducer;","import React, {KeyboardEvent} from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {RegistrationDataType} from \"../../../m3-dal/api\";\r\nimport {InitialStateType, registrationTC, setErrorRegistration} from \"../../../m2-bll/registration-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Avatar, Button, CircularProgress, TextField, Typography} from \"@material-ui/core\";\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport style from \"./Registration.module.scss\"\r\nimport CustomSnackbar from \"../../common/CustomSnackbar/CustomSnackbar\";\r\n\r\n\r\nconst validate = (value: RegistrationDataType) => {\r\n    let error: any = {};\r\n    if (!value.email) {\r\n        error.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value.email)) {\r\n        error.email = 'Invalid email address';\r\n    }\r\n    if (!value.password) {\r\n        error.password = 'Enter you password';\r\n    } else if (value.password.length < 7) {\r\n        error.password = 'Password must be 8 characters or more'\r\n    } else if (!value.repeatPassword) {\r\n        error.repeatPassword = 'Please repeat you password';\r\n    } else if (value.repeatPassword !== value.password) {\r\n        error.password = 'Your passwords are not equal';\r\n        error.repeatPassword = 'Your passwords are not equal';\r\n    }\r\n    return error;\r\n}\r\n\r\nconst Registration = ({classes}: any) => {\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, error, loaderStatus} = useSelector<AppRootStateType, InitialStateType>(state => state.registration)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            const {email, password} = values\r\n            dispatch(registrationTC({email, password}))\r\n        },\r\n    });\r\n    // SnackBarr Error\r\n    const isOpen = error !== null;\r\n    // Input Error\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        formik.setTouched({}, false)\r\n    }\r\n    const isErrorEmail = !!(formik.touched.email && formik.errors.email)\r\n    const isErrorPass = !!(formik.touched.password && formik.errors.password)\r\n    const isErrorRepeatPass = !!((isErrorPass && formik.touched.repeatPassword) || formik.errors.repeatPassword)\r\n    // Input Error\r\n    // Redirect to Login after successful registration\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/authPage/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loaderStatus === \"loading\"\r\n                ? <div className={style.circularProgress}><CircularProgress/></div>\r\n                : <Avatar className={classes.avatar}>\r\n\r\n                </Avatar>\r\n            }\r\n\r\n\r\n\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Sign up\r\n            </Typography>\r\n            <form onSubmit={formik.handleSubmit} className={classes.form}>\r\n                <div className={style.customInput}>\r\n                    <TextField\r\n                        variant=\"outlined\" margin=\"normal\"\r\n                        required fullWidth\r\n                        id=\"email\" label=\"Email Address\"\r\n                        name=\"email\" autoComplete=\"email\"\r\n                        onKeyPress={onKeyPressHandler}\r\n                        error={isErrorEmail}\r\n                        helperText={<span style={{color: \"red\", position: \"absolute\"}}>{formik.errors.email}</span>}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {isErrorEmail\r\n                        ? <div className={style.iconError}>\r\n                            <ErrorIcon color=\"secondary\"/>\r\n                        </div>\r\n                        : null}\r\n                </div>\r\n                <div className={style.customInput}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required fullWidth\r\n                        name=\"password\" label=\"Password\" type=\"password\" id=\"password\"\r\n                        onKeyPress={onKeyPressHandler}\r\n                        autoComplete=\"current-password\"\r\n                        error={isErrorPass}\r\n                        {...formik.getFieldProps('password')}\r\n                        helperText={<span style={{color: \"red\", position: \"absolute\"}}>{formik.errors.password}</span>}\r\n                    />\r\n                    {isErrorPass\r\n                        ? <div className={style.iconError}>\r\n                            <ErrorIcon color=\"secondary\"/>\r\n                        </div>\r\n                        : null}\r\n                </div>\r\n                <div className={style.customInput}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Repeat Password\"\r\n                        type=\"password\"\r\n                        id=\"repeatPassword\"\r\n                        autoComplete=\"current-password\"\r\n                        name=\"repeatPassword\"\r\n                        onKeyPress={onKeyPressHandler}\r\n                        error={isErrorRepeatPass}\r\n                        helperText={<span\r\n                            style={{color: \"red\", position: \"absolute\"}}>{formik.errors.repeatPassword}</span>}\r\n                        {...formik.getFieldProps('repeatPassword')}\r\n                    />\r\n                    {isErrorRepeatPass\r\n                        ? <div className={style.iconError}>\r\n                            <ErrorIcon color=\"secondary\"/>\r\n                        </div>\r\n                        : null}\r\n                </div>\r\n                <Button\r\n                    disabled={loaderStatus === \"loading\"}\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                >\r\n                    Sign Up\r\n                </Button>\r\n                <div className={style.snackBarContainer}>\r\n                    <CustomSnackbar\r\n                        sneckbarStyle={style.snackbarItem}\r\n                        error={error}\r\n                        dispatchCallback={() => setErrorRegistration(null)}\r\n                        open={isOpen}\r\n                        severity={\"error\"}\r\n                    />\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Registration;","import {ActionTypes} from \"./store\";\r\nimport {authAPI, ForgotPasswordType} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setStatusProgressAC} from \"./login-reducer\";\r\n\r\n\r\nconst forgotPasswordReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"FORGOT-PASSWORD\": {\r\n            return {...state, email: action.value}\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n//AC\r\nexport const forgotPasswordAC = (value: string) => {\r\n    return {type: \"FORGOT-PASSWORD\", value} as const;\r\n}\r\n\r\n\r\n//TC\r\nexport const forgotPasswordTC = (data: ForgotPasswordType) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusProgressAC(\"loading\"));\r\n    authAPI.forgotPassword(data)\r\n        .then(res => {\r\n                console.log(res.data.info)\r\n                dispatch(setStatusProgressAC(\"succeeded\"))\r\n            }\r\n        )\r\n        .catch(error => {\r\n                console.log(error)\r\n                dispatch(setStatusProgressAC(\"failed\"))\r\n            }\r\n        )\r\n}\r\n\r\n\r\n//TYPES\r\nconst InitialState = {\r\n    email: \"\"\r\n}\r\n\r\nexport type InitialStateType = typeof InitialState;\r\n\r\nexport default forgotPasswordReducer;","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {Avatar, Button, LinearProgress, TextField, Typography} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {forgotPasswordTC} from \"../../../m2-bll/forgotPassword-reducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {RequestStatusType, setStatusProgressAC} from \"../../../m2-bll/login-reducer\";\r\nimport style from \"./ForgotPassword.module.scss\"\r\nimport CustomSnackbar from \"../../common/CustomSnackbar/CustomSnackbar\";\r\n\r\nconst ForgotPassword = ({classes}: any) => {\r\n\r\n    const dispatch = useDispatch();\r\n    // NEED FIX!!!!!!!!!!!!!!!!!!!!\r\n    const progress = useSelector<AppRootStateType, RequestStatusType>(state => state.login.progress)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            from: \"test-front-admin <artem_ermakov_1999@mail.ru>\",\r\n            message: `<div>password recovery link: <a href='http://localhost:3000/#/passwordChange/$token$'>TAP TAP TAP</a></div>`\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(forgotPasswordTC(values))\r\n            formik.resetForm();\r\n        }\r\n    })\r\n    // snackbar\r\n    // NEED FIX!!!!!!!!!!!!!!!!!!!!\r\n    const isOpen = progress === \"succeeded\"\r\n\r\n    const buttonDisabled = () => {\r\n        if (progress === \"loading\") return true\r\n    }\r\n    // NEED FIX!!!!!!!!!!!!!!!!!!!!\r\n    return (\r\n        <>\r\n            {progress === \"loading\" ? <LinearProgress/> : null}\r\n\r\n            <Avatar className={classes.avatar}>\r\n\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Restore Password\r\n            </Typography>\r\n\r\n\r\n            <form onSubmit={formik.handleSubmit} className={classes.form}>\r\n                <div className={style.forgotPass}>\r\n                    <TextField\r\n                        variant=\"outlined\" margin=\"normal\"\r\n                        required fullWidth autoFocus\r\n                        id=\"email\" label=\"Email Address\"\r\n                        name=\"email\" autoComplete=\"email\"\r\n                        {...formik.getFieldProps(\"email\")}/>\r\n                    <Button\r\n                        disabled={buttonDisabled()}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Restore password\r\n                    </Button>\r\n                    <CustomSnackbar error={\"This is a success message!\"}\r\n                                    dispatchCallback={() => setStatusProgressAC('idle')}\r\n                                    open={isOpen}\r\n                                    severity={\"success\"}\r\n                                    sneckbarStyle={style.snackbarItem}\r\n                    />\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n//types\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nexport default ForgotPassword;","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {CssBaseline, Grid, Paper} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Login from \"../component/Login/Login\";\r\nimport Registration from \"../component/Registration/Registration\";\r\nimport ForgotPassword from \"../component/ForgotPassword/ForgotPassword\";\r\n\r\n\r\nconst AuthPage = () => {\r\n    const classes = useStyles();\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth)\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container component=\"main\" className={classes.root}>\r\n                <CssBaseline/>\r\n                <Grid item xs={false} sm={4} md={7} className={classes.image}/>\r\n                <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n                    <div className={classes.paper}>\r\n                        <Switch>\r\n                            <Route exact path='/authPage/login' render={() => <Login classes={classes}/>}/>\r\n                            <Route path='/authPage/registration' render={() => <Registration classes={classes}/>}/>\r\n                            <Route path='/authPage/forgotPassword' render={() => <ForgotPassword classes={classes}/>}/>\r\n                        </Switch>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\nexport default AuthPage;\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: 'url(https://source.unsplash.com/random)',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n            theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n","import {ActionTypes} from \"./store\";\r\nimport {authAPI, ChangePasswordType} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setStatusProgressAC} from \"./login-reducer\";\r\n\r\n\r\nconst InitialState = {\r\n    password: \"\",\r\n    setPassword: false,\r\n    isCorrectPass: false\r\n}\r\n\r\nconst changePasswordReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        // case \"CHANGE-PASSWORD\": {\r\n        //     return {...state, password: action.value}\r\n        // }\r\n        case \"SET-PASSWORD\": {\r\n            return {...state, setPassword: action.isSet}\r\n        }\r\n        case \"IS-CORRECT-PASSWORD\": {\r\n            return {...state, isCorrectPass: action.isCorrect}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setPasswordAC = (isSet: boolean) => (\r\n    {type: \"SET-PASSWORD\", isSet} as const\r\n)\r\nexport const isCorrectPassword = (isCorrect: boolean) => (\r\n    {type: \"IS-CORRECT-PASSWORD\", isCorrect} as const\r\n)\r\n\r\n//TC\r\nexport const changePasswordTC = (data: ChangePasswordType) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusProgressAC(\"loading\"));\r\n    dispatch(isCorrectPassword(true)); // дизейблит кнопку если пошол запрос\r\n    authAPI.changePassword(data)\r\n        .then(res => {\r\n            console.log(res.data)\r\n            dispatch(setPasswordAC(true))\r\n            dispatch(isCorrectPassword(false)); // роздизейбл кнопки если ОК\r\n            dispatch(setStatusProgressAC(\"succeeded\"))\r\n        })\r\n        .catch(error => {\r\n                dispatch(setStatusProgressAC(\"failed\"))\r\n                console.log(error)\r\n            }\r\n        )\r\n}\r\n\r\n//TYPES\r\nexport type InitialStateType = typeof InitialState;\r\n\r\n\r\nexport default changePasswordReducer;","import React from \"react\";\r\nimport {Avatar, Button, Container, CssBaseline, LinearProgress, TextField, Typography} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changePasswordTC, InitialStateType} from \"../../../m2-bll/changePassword-reducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useFormik} from \"formik\";\r\n\r\nconst PasswordChange = () => {\r\n    // style\r\n    const classes = useStyles();\r\n    // style\r\n\r\n    const {isCorrectPass, setPassword} = useSelector<AppRootStateType, InitialStateType>(state => state.changePassword)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {token} = useParams();\r\n    console.log(isCorrectPass)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: \"\",\r\n            resetPasswordToken: token\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 7) {\r\n                errors.password = \"Password > 7 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            debugger\r\n            dispatch(changePasswordTC(values))\r\n            console.log(values)\r\n        }\r\n    })\r\n\r\n    // const buttonDisabled = () => {\r\n    //     if (isCorrectPass || !formik.values.password || !formik.values.resetPasswordToken) return true\r\n    // }\r\n\r\n    if (setPassword) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isCorrectPass ? <LinearProgress/> : null}\r\n\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Change Password\r\n                    </Typography>\r\n                    <form onSubmit={formik.handleSubmit} className={classes.form} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                            helperText={<span style={{color: \"red\", position: \"fixed\"}}>{formik.errors.password}</span>}\r\n                        />\r\n                        <Button\r\n                            disabled={isCorrectPass}\r\n                            type=\"submit\"\r\n                            fullWidth variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            change password\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n    resetPasswordToken?: string\r\n}\r\n\r\nexport default PasswordChange;\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\r\nimport Header from \"./component/Header/Header\";\r\nimport {Profile} from \"./component/Profile/Profile\";\r\nimport AuthPage from \"./pages/AuthPage\";\r\nimport PasswordChange from \"./component/PasswordChange/PasswordChange\";\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <HashRouter>\r\n                <Header/>\r\n                <Switch>\r\n                    <Route exact path='/' render={() => <Profile/>}/>\r\n                    <Route path='/authPage' render={() => <AuthPage/>}/>\r\n                    <Route path='/passwordChange/:token' render={() => <PasswordChange/>}/>\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport profileReducer, {isInitializedAC, setProfileDataAC} from \"./profile-reducer\";\r\nimport loginReducer, {loginAC, setErrorMessageAC, setStatusProgressAC} from \"./login-reducer\";\r\nimport registrationReducer, {requestStatus, setErrorRegistration, setIsLoggedIn} from \"./registration-reducer\";\r\nimport changePasswordReducer, {isCorrectPassword, setPasswordAC} from \"./changePassword-reducer\";\r\nimport forgotPasswordReducer, {forgotPasswordAC} from \"./forgotPassword-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    login: loginReducer,\r\n    registration: registrationReducer,\r\n    changePassword: changePasswordReducer,\r\n    forgotPassword: forgotPasswordReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type ActionTypes =\r\n    //profile\r\n    ReturnType<typeof setProfileDataAC> |\r\n    ReturnType<typeof isInitializedAC> |\r\n    //login\r\n    ReturnType<typeof loginAC> |\r\n    ReturnType<typeof setErrorMessageAC> |\r\n    ReturnType<typeof setStatusProgressAC> |\r\n\r\n    //registration\r\n    ReturnType<typeof setIsLoggedIn> |\r\n    ReturnType<typeof setErrorRegistration> |\r\n    ReturnType<typeof requestStatus> |\r\n\r\n    //changePassword\r\n    ReturnType<typeof setPasswordAC> |\r\n    ReturnType<typeof isCorrectPassword> |\r\n    //forgotPassword\r\n    ReturnType<typeof forgotPasswordAC>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './n1_main/m1-ui/App';\r\nimport {store} from \"./n1_main/m2-bll/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"circularProgress\":\"Registration_circularProgress__3Xawq\",\"snackBarContainer\":\"Registration_snackBarContainer__27mg0\",\"snackbarItem\":\"Registration_snackbarItem__3w1ap\",\"customInput\":\"Registration_customInput__2yf13\",\"iconError\":\"Registration_iconError__2ZXk5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"circularProgress\":\"Login_circularProgress__38cNZ\",\"loginPage\":\"Login_loginPage__3OgaT\",\"snackbarItem\":\"Login_snackbarItem__3vmGO\",\"customInput\":\"Login_customInput__2grzW\",\"iconError\":\"Login_iconError__2D8u2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Profile_title__3iYoJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPass\":\"ForgotPassword_forgotPass__W3KB7\",\"snackbarItem\":\"ForgotPassword_snackbarItem__15E_H\"};"],"sourceRoot":""}