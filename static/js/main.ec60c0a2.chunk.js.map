{"version":3,"sources":["n1_main/m1-ui/component/Header/Header.tsx","n1_main/m3-dal/api.ts","n1_main/m2-bll/login-reducer.ts","n1_main/m2-bll/profile-reducer.ts","n1_main/m1-ui/component/Profile/Profile.tsx","n1_main/m1-ui/component/Login/Login.tsx","n1_main/m2-bll/registration-reducer.ts","n1_main/m1-ui/component/Registration/Registration.tsx","n1_main/m2-bll/forgotPassword-reducer.ts","n1_main/m1-ui/component/ForgotPassword/ForgotPassword.tsx","n1_main/m1-ui/pages/AuthPage.tsx","n1_main/m2-bll/changePassword-reducer.ts","n1_main/m1-ui/component/PasswordChange/PasswordChange.tsx","n1_main/m1-ui/App.tsx","n1_main/m2-bll/store.ts","index.tsx","n1_main/m1-ui/component/Registration/Registration.module.scss","n1_main/m1-ui/component/Profile/Profile.module.css","n1_main/m1-ui/component/Login/Login.module.scss","n1_main/m1-ui/component/ForgotPassword/ForgotPassword.module.scss"],"names":["Header","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","loginAC","value","type","setStatusProgressAC","progress","InitialStateLogin","isAuth","loginReducer","state","action","InitialState","userData","email","name","isInitialized","setProfileDataAC","isInitializedAC","profileReducer","Profile","useSelector","profile","login","dispatch","useDispatch","useEffect","a","res","console","log","response","error","style","position","top","textAlign","width","LinearProgress","className","mainBlock","title","Button","onClick","info","variant","color","to","Login","classes","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","length","onSubmit","then","catch","e","message","handleClose","event","reason","isOpen","Avatar","avatar","Typography","component","loginPage","handleSubmit","form","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","getFieldProps","helperText","FormControlLabel","control","Checkbox","disabled","buttonDisabled","submit","Grid","container","item","xs","Snackbar","snackbarItem","open","autoHideDuration","onClose","Alert","severity","isLoggedIn","loaderStatus","setErrorRegistration","requestStatus","registrationReducer","repeatPassword","Registration","registration","onKeyPressHandler","setTouched","isErrorEmail","touched","isErrorPass","isErrorRepeatPass","customInput","onKeyPress","iconError","snackBarContainer","forgotPasswordReducer","ForgotPassword","from","resetForm","forgotPass","AuthPage","useStyles","root","CssBaseline","sm","md","image","Paper","elevation","square","paper","exact","path","render","makeStyles","theme","height","backgroundImage","backgroundRepeat","backgroundColor","palette","grey","backgroundSize","backgroundPosition","spacing","display","flexDirection","alignItems","secondary","main","marginTop","setPassword","isCorrectPass","isCorrectPassword","isCorrect","changePasswordReducer","isSet","PasswordChange","changePassword","token","useParams","resetPasswordToken","Container","maxWidth","App","rootReducer","combineReducers","forgotPassword","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ec60c0a2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header;","import axios from 'axios';\r\n\r\n// http://localhost:7542/2.0/  => local back\r\n\r\n// https://neko-back.herokuapp.com/2.0/  => remote back\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    ...settings,\r\n})\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseLoginType>(\"auth/login\", data);\r\n    },\r\n    registration(data: RegistrationDataType) {\r\n        return instance.post(\"auth/register\", data);\r\n    },\r\n    forgotPassword(data: ForgotPasswordType) {\r\n        return instance.post<ResponseForgotType>(\"auth/forgot\", data);\r\n    },\r\n    changePassword(data: ChangePasswordType) {\r\n        return instance.post(\"auth/set-new-password\", data)\r\n    },\r\n    authMe() {\r\n        return instance.post<ResponseLoginType>(\"auth/me\", {});\r\n    },\r\n    logOut() {\r\n        return instance.delete(\"auth/me\", {});\r\n    },\r\n}\r\n//types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type ForgotPasswordType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\nexport type ChangePasswordType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type ResponseLoginType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error: string\r\n}\r\n\r\nexport type ResponseForgotType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\nexport type RegistrationDataType = {\r\n    email: string\r\n    password: string\r\n    repeatPassword?: string // not necessarily\r\n}","import {ActionTypes} from \"./store\";\r\nimport {authAPI, LoginParamsType} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setProfileDataAC} from \"./profile-reducer\";\r\n\r\nconst loginReducer = (state: InitialStateLoginType = InitialStateLogin, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\": {\r\n            return {...state, isAuth: action.value}\r\n        }\r\n        case \"SET-STATUS-PROGRESS\": {\r\n            return {...state, progress: action.progress}\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n//AC\r\nexport const loginAC = (value: boolean) => (\r\n    {type: \"login/SET-IS-LOGGED-IN\", value} as const\r\n)\r\nexport const setStatusProgressAC = (progress: RequestStatusType) => (\r\n    {type: \"SET-STATUS-PROGRESS\", progress} as const\r\n)\r\n\r\n\r\n//TC\r\nexport const LoginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionTypes>) => {\r\n    dispatch(setStatusProgressAC(\"loading\"));\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(loginAC(true))\r\n            dispatch(setProfileDataAC(res.data))\r\n            dispatch(setStatusProgressAC(\"succeeded\"))\r\n\r\n        })\r\n        .catch(e => {\r\n            const error = e.response ? e.response.data.error : (e.message + \" ,more details in the console\")\r\n            console.log(\"Error\", {...e})\r\n            dispatch(setStatusProgressAC(\"failed\"))\r\n        })\r\n}\r\n\r\n\r\n//TYPES\r\nconst InitialStateLogin = {\r\n    isAuth: false,\r\n    progress: \"idle\" as RequestStatusType,\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialStateLogin;\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\nexport default loginReducer;","import {ActionTypes} from \"./store\";\r\nimport {authAPI, ResponseLoginType} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loginAC} from \"./login-reducer\";\r\n\r\ntype InitialStateType = typeof InitialState;\r\n\r\nconst InitialState = {\r\n    userData: {\r\n        email: '',\r\n        name: '',\r\n    },\r\n    isInitialized: true\r\n}\r\n\r\nconst profileReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"SET-PROFILE-DATA\": {\r\n            return {...state, userData: action.userData}\r\n        }\r\n        case \"USER-INITIALIZED\": {\r\n            return {...state, isInitialized: action.isInitialized}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const setProfileDataAC = (userData: ResponseLoginType) => (\r\n    {type: \"SET-PROFILE-DATA\", userData} as const\r\n)\r\nexport const isInitializedAC = (isInitialized: boolean) => (\r\n    {type: \"USER-INITIALIZED\", isInitialized} as const\r\n)\r\n\r\nexport const authMeTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(isInitializedAC(true))\r\n        const res = await authAPI.authMe()\r\n        dispatch(setProfileDataAC(res.data))\r\n\r\n        dispatch(loginAC(true))\r\n    } catch (e) {\r\n        console.log(e.response.data.error) // message => user not authorized\r\n    }\r\n    dispatch(isInitializedAC(false))\r\n}\r\nexport const logOutTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(isInitializedAC(true))\r\n        const res = await authAPI.logOut()\r\n        console.log(res.data.info)\r\n        dispatch(loginAC(false))\r\n    } catch (e) {\r\n        console.log(e.response.data.error)\r\n    }\r\n    dispatch(isInitializedAC(false))\r\n}\r\n\r\n\r\nexport default profileReducer;","import React, {useEffect} from \"react\";\r\nimport style from \"./Profile.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {authMeTC, logOutTC} from \"../../../m2-bll/profile-reducer\";\r\nimport {Button, LinearProgress} from \"@material-ui/core\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype  userDataType = { email: string, name: string }\r\n\r\nexport const Profile = () => {\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.profile.isInitialized)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth)\r\n    const userData = useSelector<AppRootStateType, userDataType>(state => state.profile.userData)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(authMeTC())\r\n    }, [dispatch])\r\n\r\n    const logOutClick = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    if (isInitialized) {\r\n        return <div style={{position: 'fixed', top: '0', textAlign: 'center', width: '100%'}}>\r\n            <LinearProgress/>\r\n        </div>\r\n    }\r\n    if (!isAuth) {\r\n        return <Redirect to=\"/authPage/login\"/>\r\n    }\r\n    return (\r\n        <div className={style.mainBlock}>\r\n            <div className=\"container\">\r\n                <h1 className={style.title}>Main page</h1>\r\n                <h3>{userData.name}</h3>\r\n                <Button onClick={logOutClick} variant=\"contained\" color=\"primary\">Log Out</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Avatar, Button, Checkbox, FormControlLabel, Grid, Snackbar, TextField, Typography} from \"@material-ui/core\";\r\nimport {LoginTC, setStatusProgressAC} from \"../../../m2-bll/login-reducer\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport style from \"./Login.module.scss\"\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\ntype LoginFormType = {\r\n    progress: string\r\n    classes: any\r\n}\r\n\r\n\r\nconst Login = ({progress, classes}: LoginFormType) => {\r\n    const dispatch = useDispatch();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 7) {\r\n                errors.password = \"Password > 7 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(LoginTC(values))\r\n        }\r\n    })\r\n\r\n    // snackbar\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setStatusProgressAC(\"idle\"))\r\n    };\r\n    const isOpen = progress === \"failed\"\r\n\r\n    // snackbar\r\n\r\n    const buttonDisabled = () => {\r\n        if (progress === \"loading\" || !formik.values.email || !formik.values.password) return true\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon/>\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n            </Typography>\r\n\r\n            <div className={style.loginPage}>\r\n\r\n\r\n                <form onSubmit={formik.handleSubmit} className={classes.form}>\r\n\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        {...formik.getFieldProps(\"email\")}\r\n                        helperText={<span style={{color: \"red\", position: \"absolute\"}}>{formik.errors.email}</span>}\r\n                    />\r\n                    {/*{formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}*/}\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        {...formik.getFieldProps(\"password\")}\r\n                        helperText={<span style={{color: \"red\", position: \"absolute\"}}>{formik.errors.password}</span>}\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} color=\"primary\"/>}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        disabled={buttonDisabled()}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <NavLink to=\"/authPage/forgotPassword\">Forgot password?</NavLink>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <NavLink to=\"/authPage/registration\">\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </NavLink>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Snackbar\r\n                        className={style.snackbarItem}\r\n                        open={isOpen}\r\n                        autoHideDuration={4000} onClose={handleClose}>\r\n                        <Alert onClose={handleClose} severity=\"error\">\r\n                            This is a Error message!\r\n                        </Alert>\r\n                    </Snackbar>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n\r\n\r\n/*\r\n\r\n{formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n\r\n{formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n*/\r\n\r\n","import {ActionTypes} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, RegistrationDataType} from \"../m3-dal/api\";\r\n\r\nexport type InitialStateType = typeof InitialState;\r\nexport type RequestStatusType = 'idle' | 'loading'\r\nconst InitialState = {\r\n    isLoggedIn: false,\r\n    error: null as string | null,\r\n    loaderStatus: 'idle' as RequestStatusType\r\n}\r\n\r\nconst registrationReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"SET-IS-LOGGED-IN\": {\r\n            return {...state, isLoggedIn: true}\r\n        }\r\n        case \"SET-ERROR-REGISTRATION\": {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"SET-REQUEST-STATUS\": {\r\n            return {...state, loaderStatus: action.loaderStatus}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const setIsLoggedIn = () => (\r\n    {type: \"SET-IS-LOGGED-IN\"} as const\r\n)\r\nexport const setErrorRegistration = (error: string | null) => (\r\n    {type: \"SET-ERROR-REGISTRATION\", error} as const\r\n)\r\nexport const requestStatus = (loaderStatus: RequestStatusType) => (\r\n    {type: \"SET-REQUEST-STATUS\", loaderStatus} as const\r\n)\r\n\r\n\r\n//THUNK\r\n\r\nexport const registrationTC = (data: RegistrationDataType) => async (dispatch: Dispatch) => {\r\n    dispatch(requestStatus('loading'))\r\n    try {\r\n        await authAPI.registration(data)\r\n        dispatch(setIsLoggedIn())\r\n    } catch (e) {\r\n        dispatch(setErrorRegistration(e.response.data.error))\r\n    }\r\n    finally {\r\n        dispatch(requestStatus('idle'))\r\n    }\r\n}\r\n\r\nexport default registrationReducer;","import React, {KeyboardEvent} from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {RegistrationDataType} from \"../../../m3-dal/api\";\r\nimport {InitialStateType, registrationTC, setErrorRegistration} from \"../../../m2-bll/registration-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {Avatar, Button, LinearProgress, Snackbar, TextField, Typography} from \"@material-ui/core\";\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport style from \"./Registration.module.scss\"\r\n\r\n\r\nconst validate = (value: RegistrationDataType) => {\r\n    let error: any = {};\r\n    if (!value.email) {\r\n        error.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value.email)) {\r\n        error.email = 'Invalid email address';\r\n    }\r\n    if (!value.password) {\r\n        error.password = 'Enter you password';\r\n    } else if (value.password.length < 7) {\r\n        error.password = 'Password must be 8 characters or more'\r\n    } else if (!value.repeatPassword) {\r\n        error.repeatPassword = 'Please repeat you password';\r\n    } else if (value.repeatPassword !== value.password) {\r\n        error.password = 'Your passwords are not equal';\r\n        error.repeatPassword = 'Your passwords are not equal';\r\n    }\r\n    return error;\r\n}\r\n\r\nconst Registration = ({classes}: any) => {\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, error, loaderStatus} = useSelector<AppRootStateType, InitialStateType>(state => state.registration)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            const {email, password} = values\r\n            dispatch(registrationTC({email, password}))\r\n        },\r\n    });\r\n    // SnackBarr Error\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setErrorRegistration(null));\r\n    }\r\n    const isOpen = error !== null;\r\n    // Input Error\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        formik.setTouched({}, false)\r\n    }\r\n    const isErrorEmail = !!(formik.touched.email && formik.errors.email)\r\n    const isErrorPass = !!(formik.touched.password && formik.errors.password)\r\n    const isErrorRepeatPass = !!(formik.touched.repeatPassword && formik.errors.repeatPassword)\r\n    // Input Error\r\n    // Redirect to Login after successful registration\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/authPage/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loaderStatus === \"loading\" && <LinearProgress/>}\r\n\r\n            <Avatar className={classes.avatar}>\r\n                {/*ICON*/}\r\n            </Avatar>\r\n\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Sign up\r\n            </Typography>\r\n            <form onSubmit={formik.handleSubmit} className={classes.form}>\r\n                <div className={style.customInput}>\r\n                    <TextField\r\n                        variant=\"outlined\" margin=\"normal\"\r\n                        required fullWidth\r\n                        id=\"email\" label=\"Email Address\"\r\n                        name=\"email\" autoComplete=\"email\"\r\n                        onKeyPress={onKeyPressHandler}\r\n                        error={isErrorEmail}\r\n                        helperText={<span style={{color: \"red\", position: \"absolute\"}}>{formik.errors.email}</span>}\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {isErrorEmail\r\n                        ? <div className={style.iconError}>\r\n                            <ErrorIcon color=\"secondary\"/>\r\n                        </div>\r\n                        : null}\r\n                </div>\r\n                <div className={style.customInput}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        onKeyPress={onKeyPressHandler}\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        error={isErrorPass}\r\n                        {...formik.getFieldProps('password')}\r\n                        helperText={<span style={{color: \"red\", position: \"absolute\"}}>{formik.errors.password}</span>}\r\n                    />\r\n                    {isErrorPass\r\n                        ? <div className={style.iconError}>\r\n                            <ErrorIcon color=\"secondary\"/>\r\n                        </div>\r\n                        : null}\r\n                </div>\r\n                <div className={style.customInput}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Repeat Password\"\r\n                        type=\"password\"\r\n                        id=\"repeatPassword\"\r\n                        autoComplete=\"current-password\"\r\n                        name=\"repeatPassword\"\r\n                        onKeyPress={onKeyPressHandler}\r\n                        error={isErrorRepeatPass}\r\n                        helperText={<span\r\n                            style={{color: \"red\", position: \"absolute\"}}>{formik.errors.repeatPassword}</span>}\r\n                        {...formik.getFieldProps('repeatPassword')}\r\n                    />\r\n                    {isErrorRepeatPass && isErrorPass\r\n                        ? <div className={style.iconError}>\r\n                            <ErrorIcon color=\"secondary\"/>\r\n                        </div>\r\n                        : null}\r\n                </div>\r\n                <Button\r\n                    disabled={loaderStatus === \"loading\"}\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                >\r\n                    Sign Up\r\n                </Button>\r\n                <div className={style.snackBarContainer}>\r\n                    <Snackbar\r\n                        className={style.snackbarItem}\r\n                        open={isOpen} autoHideDuration={5000} onClose={handleClose}>\r\n                        <Alert variant=\"filled\" severity=\"error\">\r\n                            {error}\r\n                        </Alert>\r\n                    </Snackbar>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Registration;","import {ActionTypes} from \"./store\";\r\nimport {authAPI, ForgotPasswordType} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setStatusProgressAC} from \"./login-reducer\";\r\n\r\n\r\nconst forgotPasswordReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"FORGOT-PASSWORD\": {\r\n            return {...state, email: action.value}\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n//AC\r\nexport const forgotPasswordAC = (value: string) => {\r\n    return {type: \"FORGOT-PASSWORD\", value} as const;\r\n}\r\n\r\n\r\n//TC\r\nexport const forgotPasswordTC = (data: ForgotPasswordType) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusProgressAC(\"loading\"));\r\n    authAPI.forgotPassword(data)\r\n        .then(res => {\r\n                console.log(res.data.info)\r\n                dispatch(setStatusProgressAC(\"succeeded\"))\r\n            }\r\n        )\r\n        .catch(error => {\r\n                console.log(error)\r\n                dispatch(setStatusProgressAC(\"failed\"))\r\n            }\r\n        )\r\n}\r\n\r\n\r\n//TYPES\r\nconst InitialState = {\r\n    email: \"\"\r\n}\r\n\r\nexport type InitialStateType = typeof InitialState;\r\n\r\nexport default forgotPasswordReducer;","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {Avatar, Button, LinearProgress, Snackbar, TextField, Typography} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {forgotPasswordTC} from \"../../../m2-bll/forgotPassword-reducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {RequestStatusType, setStatusProgressAC} from \"../../../m2-bll/login-reducer\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport style from \"./ForgotPassword.module.scss\"\r\n\r\nconst ForgotPassword = ({classes}: any) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const progress = useSelector<AppRootStateType, RequestStatusType>(state => state.login.progress)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            from: \"test-front-admin <artem_ermakov_1999@mail.ru>\",\r\n            message: `<div>password recovery link: <a href='http://localhost:3000/#/passwordChange/$token$'>TAP TAP TAP</a></div>`\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(forgotPasswordTC(values))\r\n            formik.resetForm();\r\n        }\r\n    })\r\n\r\n    // snackbar // ПЛОХОЙ АДАПТИВ!!!!!\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setStatusProgressAC(\"idle\"))\r\n    };\r\n    const isOpen = progress === \"succeeded\"\r\n\r\n    // snackbar\r\n    const buttonDisabled = () => {\r\n        if (progress === \"loading\") return true\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {progress === \"loading\" ? <LinearProgress/> : null}\r\n\r\n            <Avatar className={classes.avatar}>\r\n\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Restore Password\r\n            </Typography>\r\n\r\n\r\n            <form onSubmit={formik.handleSubmit} className={classes.form}>\r\n                <div className={style.forgotPass}>\r\n                    <TextField\r\n                        variant=\"outlined\" margin=\"normal\"\r\n                        required fullWidth autoFocus\r\n                        id=\"email\" label=\"Email Address\"\r\n                        name=\"email\" autoComplete=\"email\"\r\n                        {...formik.getFieldProps(\"email\")}/>\r\n                    {/*{formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}*/}\r\n\r\n                    <Button\r\n                        disabled={buttonDisabled()}\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Restore password\r\n                    </Button>\r\n                    <Snackbar\r\n                        className={style.snackbarItem}\r\n                        open={isOpen}\r\n                        autoHideDuration={4000} onClose={handleClose}>\r\n                        <Alert onClose={handleClose} severity=\"success\">\r\n                            This is a success message!\r\n                        </Alert>\r\n                    </Snackbar>\r\n                </div>\r\n            </form>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n//types\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nexport default ForgotPassword;","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {RequestStatusType} from \"../../m2-bll/login-reducer\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {CssBaseline, Grid, LinearProgress, Paper} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Login from \"../component/Login/Login\";\r\nimport Registration from \"../component/Registration/Registration\";\r\nimport ForgotPassword from \"../component/ForgotPassword/ForgotPassword\";\r\n\r\n\r\nconst AuthPage = () => {\r\n    const classes = useStyles();\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth)\r\n    const progress = useSelector<AppRootStateType, RequestStatusType>(state => state.login.progress)\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {progress === \"loading\" ? <LinearProgress/> : null}\r\n            <Grid container component=\"main\" className={classes.root}>\r\n                <CssBaseline/>\r\n                <Grid item xs={false} sm={4} md={7} className={classes.image}/>\r\n                <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n                    <div className={classes.paper}>\r\n                        <Switch>\r\n                            <Route exact path='/authPage/login' render={() => <Login progress={progress} classes={classes}/>}/>\r\n                            <Route path='/authPage/registration' render={() => <Registration classes={classes}/>}/>\r\n                            <Route path='/authPage/forgotPassword' render={() => <ForgotPassword classes={classes}/>}/>\r\n                        </Switch>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\nexport default AuthPage;\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: 'url(https://source.unsplash.com/random)',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n            theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n","import {ActionTypes} from \"./store\";\r\nimport {authAPI, ChangePasswordType} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setStatusProgressAC} from \"./login-reducer\";\r\n\r\n\r\nconst InitialState = {\r\n    password: \"\",\r\n    setPassword: false,\r\n    isCorrectPass: false\r\n}\r\n\r\nconst changePasswordReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        // case \"CHANGE-PASSWORD\": {\r\n        //     return {...state, password: action.value}\r\n        // }\r\n        case \"SET-PASSWORD\": {\r\n            return {...state, setPassword: action.isSet}\r\n        }\r\n        case \"IS-CORRECT-PASSWORD\": {\r\n            return {...state, isCorrectPass: action.isCorrect}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setPasswordAC = (isSet: boolean) => (\r\n    {type: \"SET-PASSWORD\", isSet} as const\r\n)\r\nexport const isCorrectPassword = (isCorrect: boolean) => (\r\n    {type: \"IS-CORRECT-PASSWORD\", isCorrect} as const\r\n)\r\n\r\n//TC\r\nexport const changePasswordTC = (data: ChangePasswordType) => (dispatch: Dispatch) => {\r\n    dispatch(setStatusProgressAC(\"loading\"));\r\n    dispatch(isCorrectPassword(true)); // дизейблит кнопку если пошол запрос\r\n    authAPI.changePassword(data)\r\n        .then(res => {\r\n            console.log(res.data)\r\n            dispatch(setPasswordAC(true))\r\n            dispatch(isCorrectPassword(false)); // роздизейбл кнопки если ОК\r\n            dispatch(setStatusProgressAC(\"succeeded\"))\r\n        })\r\n        .catch(error => {\r\n                dispatch(setStatusProgressAC(\"failed\"))\r\n                console.log(error)\r\n            }\r\n        )\r\n}\r\n\r\n//TYPES\r\nexport type InitialStateType = typeof InitialState;\r\n\r\n\r\nexport default changePasswordReducer;","import React from \"react\";\r\nimport {Avatar, Button, Container, CssBaseline, LinearProgress, TextField, Typography} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changePasswordTC, InitialStateType} from \"../../../m2-bll/changePassword-reducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useFormik} from \"formik\";\r\n\r\nconst PasswordChange = () => {\r\n    // style\r\n    const classes = useStyles();\r\n    // style\r\n\r\n    const {isCorrectPass, setPassword} = useSelector<AppRootStateType, InitialStateType>(state => state.changePassword)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {token} = useParams();\r\n    console.log(isCorrectPass)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: \"\",\r\n            resetPasswordToken: token\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 7) {\r\n                errors.password = \"Password > 7 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            debugger\r\n            dispatch(changePasswordTC(values))\r\n            console.log(values)\r\n        }\r\n    })\r\n\r\n    // const buttonDisabled = () => {\r\n    //     if (isCorrectPass || !formik.values.password || !formik.values.resetPasswordToken) return true\r\n    // }\r\n\r\n    if (setPassword) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isCorrectPass ? <LinearProgress/> : null}\r\n\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Change Password\r\n                    </Typography>\r\n                    <form onSubmit={formik.handleSubmit} className={classes.form} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                            helperText={<span style={{color: \"red\", position: \"fixed\"}}>{formik.errors.password}</span>}\r\n                        />\r\n                        <Button\r\n                            disabled={isCorrectPass}\r\n                            type=\"submit\"\r\n                            fullWidth variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            change password\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n    resetPasswordToken?: string\r\n}\r\n\r\nexport default PasswordChange;\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\r\nimport Header from \"./component/Header/Header\";\r\nimport {Profile} from \"./component/Profile/Profile\";\r\nimport AuthPage from \"./pages/AuthPage\";\r\nimport PasswordChange from \"./component/PasswordChange/PasswordChange\";\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <HashRouter>\r\n                <Header/>\r\n                <Switch>\r\n                    <Route exact path='/' render={() => <Profile/>}/>\r\n                    <Route path='/authPage' render={() => <AuthPage/>}/>\r\n                    <Route path='/passwordChange/:token' render={() => <PasswordChange/>}/>\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport profileReducer, {isInitializedAC, setProfileDataAC} from \"./profile-reducer\";\r\nimport loginReducer, {loginAC, setStatusProgressAC} from \"./login-reducer\";\r\nimport registrationReducer, {requestStatus, setErrorRegistration, setIsLoggedIn} from \"./registration-reducer\";\r\nimport changePasswordReducer, {isCorrectPassword, setPasswordAC} from \"./changePassword-reducer\";\r\nimport forgotPasswordReducer, {forgotPasswordAC} from \"./forgotPassword-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    login: loginReducer,\r\n    registration: registrationReducer,\r\n    changePassword: changePasswordReducer,\r\n    forgotPassword: forgotPasswordReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type ActionTypes = |\r\n    ReturnType<typeof setProfileDataAC> |\r\n    ReturnType<typeof isInitializedAC> |\r\n    ReturnType<typeof loginAC> |\r\n    ReturnType<typeof setIsLoggedIn> |\r\n    ReturnType<typeof setErrorRegistration> |\r\n    ReturnType<typeof requestStatus> |\r\n    ReturnType<typeof setStatusProgressAC> |\r\n    ReturnType<typeof forgotPasswordAC> |\r\n    ReturnType<typeof setPasswordAC> |\r\n    ReturnType<typeof isCorrectPassword>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './n1_main/m1-ui/App';\r\nimport {store} from \"./n1_main/m2-bll/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"snackBarContainer\":\"Registration_snackBarContainer__2wOL7\",\"snackbarItem\":\"Registration_snackbarItem__3M2WM\",\"customInput\":\"Registration_customInput__2PPe3\",\"iconError\":\"Registration_iconError__QLFVJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Profile_title__12_Ys\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__2MDjz\",\"snackbarItem\":\"Login_snackbarItem__153nP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPass\":\"ForgotPassword_forgotPass__3-0ur\",\"snackbarItem\":\"ForgotPassword_snackbarItem__15isM\"};"],"sourceRoot":""}